// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RomManagerShared.Base.Database;


#nullable disable

namespace RomManagerShared.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240215075618_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("DLCUpdate", b =>
                {
                    b.Property<int>("DLCsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UpdatesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DLCsId", "UpdatesId");

                    b.HasIndex("UpdatesId");

                    b.ToTable("DLCUpdate");
                });

            modelBuilder.Entity("RomManagerShared.Base.DLC", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Banner")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DLCId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Developer")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<string>("Genres")
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasColumnType("TEXT");

                    b.Property<string>("Images")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDemo")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFolderFormat")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Languages")
                        .HasColumnType("TEXT");

                    b.Property<string>("MinimumFirmware")
                        .HasColumnType("TEXT");

                    b.Property<string>("MinimumGameUpdate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfPlayers")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Publisher")
                        .HasColumnType("TEXT");

                    b.Property<string>("Regions")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DLCId");

                    b.ToTable("DLC");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DLC");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RomManagerShared.Base.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Banner")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DLCId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Developer")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.Property<int?>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Genres")
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasColumnType("TEXT");

                    b.Property<string>("Images")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDemo")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFolderFormat")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Languages")
                        .HasColumnType("TEXT");

                    b.Property<string>("MinimumFirmware")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfPlayers")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Publisher")
                        .HasColumnType("TEXT");

                    b.Property<string>("Regions")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleID")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Version")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DLCId");

                    b.HasIndex("GameId");

                    b.HasIndex("UpdateId");

                    b.ToTable("Game");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Game");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RomManagerShared.Base.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DLCId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Name")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RatingContents")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DLCId");

                    b.HasIndex("GameId");

                    b.HasIndex("UpdateId");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("RomManagerShared.Base.RomDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DLCId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Language")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DLCId");

                    b.HasIndex("GameId");

                    b.HasIndex("UpdateId");

                    b.ToTable("RomDescription");
                });

            modelBuilder.Entity("RomManagerShared.Base.RomHash", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DLCId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Extension")
                        .HasColumnType("TEXT");

                    b.Property<int?>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DLCId");

                    b.HasIndex("GameId");

                    b.HasIndex("UpdateId");

                    b.ToTable("RomHash");
                });

            modelBuilder.Entity("RomManagerShared.Base.RomHashProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("RomHashId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RomHashId");

                    b.ToTable("RomHashProperty");
                });

            modelBuilder.Entity("RomManagerShared.Base.RomTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DLCId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Language")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DLCId");

                    b.HasIndex("GameId");

                    b.HasIndex("UpdateId");

                    b.ToTable("RomTitle");
                });

            modelBuilder.Entity("RomManagerShared.Base.Update", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Banner")
                        .HasColumnType("TEXT");

                    b.Property<string>("Developer")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<string>("Genres")
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasColumnType("TEXT");

                    b.Property<string>("Images")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDemo")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFolderFormat")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Languages")
                        .HasColumnType("TEXT");

                    b.Property<string>("MinimumFirmware")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfPlayers")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Publisher")
                        .HasColumnType("TEXT");

                    b.Property<string>("Regions")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleID")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Version")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UpdateId");

                    b.ToTable("Update");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Update");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RomManagerShared.Switch.TitleInfoProviders.SwitchJsonRomDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Banner")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "bannerUrl");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("Developer")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "developer");

                    b.Property<string>("Genres")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "category");

                    b.Property<string>("Icon")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "iconUrl");

                    b.Property<string>("Images")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "screenshots");

                    b.Property<bool?>("IsDemo")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "isDemo");

                    b.Property<string>("Languages")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "languages");

                    b.Property<int?>("NumberOfPlayers")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "numberOfPlayers");

                    b.Property<string>("Publisher")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "publisher");

                    b.Property<int?>("Rating")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "rating");

                    b.Property<string>("RatingContent")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "ratingContent");

                    b.Property<string>("Region")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "region");

                    b.Property<int?>("ReleaseDate")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "releaseDate");

                    b.Property<long?>("Size")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "size");

                    b.Property<string>("TitleID")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("TitleName")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<long?>("Version")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "version");

                    b.HasKey("Id");

                    b.ToTable("SwitchJsonRomDTOs");
                });

            modelBuilder.Entity("RomManagerShared.ThreeDS.TitleInfoProviders.ThreeDSJsonTitleInfoProvider+ThreeDSJsonDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TitleID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ThreeDSJsonDTOs");
                });

            modelBuilder.Entity("RomManagerShared.Wii.TitleInfoProviders.WiiGameTDBXmlRomDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Developer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Languages")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Players")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReleaseDate")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Synopsis")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WiiXmlRomDTOs");
                });

            modelBuilder.Entity("RomManagerShared.WiiU.WiiUWikiBrewTitleDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompanyCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Region")
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleID")
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Versions")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WiiUWikiBrewTitleDTOs");
                });

            modelBuilder.Entity("RomManagerShared.PS3.PS3DLC", b =>
                {
                    b.HasBaseType("RomManagerShared.Base.DLC");

                    b.HasDiscriminator().HasValue("PS3DLC");
                });

            modelBuilder.Entity("RomManagerShared.PS4.PS4DLC", b =>
                {
                    b.HasBaseType("RomManagerShared.Base.DLC");

                    b.HasDiscriminator().HasValue("PS4DLC");
                });

            modelBuilder.Entity("RomManagerShared.PSP.PSPDLC", b =>
                {
                    b.HasBaseType("RomManagerShared.Base.DLC");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DiskNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiskTotal")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParentalLevel")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("PSPDLC");
                });

            modelBuilder.Entity("RomManagerShared.PSVita.PSVitaDLC", b =>
                {
                    b.HasBaseType("RomManagerShared.Base.DLC");

                    b.HasDiscriminator().HasValue("PSVitaDLC");
                });

            modelBuilder.Entity("RomManagerShared.Switch.SwitchDLC", b =>
                {
                    b.HasBaseType("RomManagerShared.Base.DLC");

                    b.Property<string>("RelatedGameTitleID")
                        .HasColumnType("TEXT");

                    b.Property<string>("RelatedGameTitleName")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("SwitchDLC");
                });

            modelBuilder.Entity("RomManagerShared.ThreeDS.ThreeDSDLC", b =>
                {
                    b.HasBaseType("RomManagerShared.Base.DLC");

                    b.HasDiscriminator().HasValue("ThreeDSDLC");
                });

            modelBuilder.Entity("RomManagerShared.WiiU.WiiUDLC", b =>
                {
                    b.HasBaseType("RomManagerShared.Base.DLC");

                    b.Property<string>("RelatedGameTitleID")
                        .HasColumnType("TEXT");

                    b.Property<string>("RelatedGameTitleName")
                        .HasColumnType("TEXT");

                    b.ToTable("DLC", t =>
                        {
                            t.Property("RelatedGameTitleID")
                                .HasColumnName("WiiUDLC_RelatedGameTitleID");

                            t.Property("RelatedGameTitleName")
                                .HasColumnName("WiiUDLC_RelatedGameTitleName");
                        });

                    b.HasDiscriminator().HasValue("WiiUDLC");
                });

            modelBuilder.Entity("RomManagerShared.Xbox360.Xbox360DLC", b =>
                {
                    b.HasBaseType("RomManagerShared.Base.DLC");

                    b.HasDiscriminator().HasValue("Xbox360DLC");
                });

            modelBuilder.Entity("RomManagerShared.DS.DSGame", b =>
                {
                    b.HasBaseType("RomManagerShared.Base.Game");

                    b.HasDiscriminator().HasValue("DSGame");
                });

            modelBuilder.Entity("RomManagerShared.GameBoy.GameBoyGame", b =>
                {
                    b.HasBaseType("RomManagerShared.Base.Game");

                    b.HasDiscriminator().HasValue("GameBoyGame");
                });

            modelBuilder.Entity("RomManagerShared.GameBoyAdvance.GameBoyAdvanceGame", b =>
                {
                    b.HasBaseType("RomManagerShared.Base.Game");

                    b.HasDiscriminator().HasValue("GameBoyAdvanceGame");
                });

            modelBuilder.Entity("RomManagerShared.Nintendo64.Nintendo64Game", b =>
                {
                    b.HasBaseType("RomManagerShared.Base.Game");

                    b.HasDiscriminator().HasValue("Nintendo64Game");
                });

            modelBuilder.Entity("RomManagerShared.OriginalXbox.OriginalXboxGame", b =>
                {
                    b.HasBaseType("RomManagerShared.Base.Game");

                    b.HasDiscriminator().HasValue("OriginalXboxGame");
                });

            modelBuilder.Entity("RomManagerShared.PS2.PS2Game", b =>
                {
                    b.HasBaseType("RomManagerShared.Base.Game");

                    b.HasDiscriminator().HasValue("PS2Game");
                });

            modelBuilder.Entity("RomManagerShared.PS3.PS3Game", b =>
                {
                    b.HasBaseType("RomManagerShared.Base.Game");

                    b.HasDiscriminator().HasValue("PS3Game");
                });

            modelBuilder.Entity("RomManagerShared.PS4.PS4Game", b =>
                {
                    b.HasBaseType("RomManagerShared.Base.Game");

                    b.HasDiscriminator().HasValue("PS4Game");
                });

            modelBuilder.Entity("RomManagerShared.PSP.PSPGame", b =>
                {
                    b.HasBaseType("RomManagerShared.Base.Game");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DiskNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiskTotal")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParentalLevel")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("PSPGame");
                });

            modelBuilder.Entity("RomManagerShared.PSVita.PSVitaGame", b =>
                {
                    b.HasBaseType("RomManagerShared.Base.Game");

                    b.HasDiscriminator().HasValue("PSVitaGame");
                });

            modelBuilder.Entity("RomManagerShared.SNES.SNESGame", b =>
                {
                    b.HasBaseType("RomManagerShared.Base.Game");

                    b.HasDiscriminator().HasValue("SNESGame");
                });

            modelBuilder.Entity("RomManagerShared.SegaSaturn.SegaSaturnGame", b =>
                {
                    b.HasBaseType("RomManagerShared.Base.Game");

                    b.HasDiscriminator().HasValue("SegaSaturnGame");
                });

            modelBuilder.Entity("RomManagerShared.Switch.SwitchGame", b =>
                {
                    b.HasBaseType("RomManagerShared.Base.Game");

                    b.HasDiscriminator().HasValue("SwitchGame");
                });

            modelBuilder.Entity("RomManagerShared.ThreeDS.ThreeDSGame", b =>
                {
                    b.HasBaseType("RomManagerShared.Base.Game");

                    b.HasDiscriminator().HasValue("ThreeDSGame");
                });

            modelBuilder.Entity("RomManagerShared.Wii.WiiGame", b =>
                {
                    b.HasBaseType("RomManagerShared.Base.Game");

                    b.HasDiscriminator().HasValue("WiiGame");
                });

            modelBuilder.Entity("RomManagerShared.WiiU.WiiUGame", b =>
                {
                    b.HasBaseType("RomManagerShared.Base.Game");

                    b.HasDiscriminator().HasValue("WiiUGame");
                });

            modelBuilder.Entity("RomManagerShared.Xbox360.Xbox360Game", b =>
                {
                    b.HasBaseType("RomManagerShared.Base.Game");

                    b.HasDiscriminator().HasValue("Xbox360Game");
                });

            modelBuilder.Entity("RomManagerShared.PS3.PS3Update", b =>
                {
                    b.HasBaseType("RomManagerShared.Base.Update");

                    b.HasDiscriminator().HasValue("PS3Update");
                });

            modelBuilder.Entity("RomManagerShared.PS4.PS4Update", b =>
                {
                    b.HasBaseType("RomManagerShared.Base.Update");

                    b.HasDiscriminator().HasValue("PS4Update");
                });

            modelBuilder.Entity("RomManagerShared.PSP.PSPUpdate", b =>
                {
                    b.HasBaseType("RomManagerShared.Base.Update");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DiskNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiskTotal")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParentalLevel")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("PSPUpdate");
                });

            modelBuilder.Entity("RomManagerShared.PSVita.PSVitaUpdate", b =>
                {
                    b.HasBaseType("RomManagerShared.Base.Update");

                    b.HasDiscriminator().HasValue("PSVitaUpdate");
                });

            modelBuilder.Entity("RomManagerShared.Switch.SwitchUpdate", b =>
                {
                    b.HasBaseType("RomManagerShared.Base.Update");

                    b.Property<string>("RelatedGameTitleID")
                        .HasColumnType("TEXT");

                    b.Property<string>("RelatedGameTitleName")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("SwitchUpdate");
                });

            modelBuilder.Entity("RomManagerShared.ThreeDS.ThreeDSUpdate", b =>
                {
                    b.HasBaseType("RomManagerShared.Base.Update");

                    b.HasDiscriminator().HasValue("ThreeDSUpdate");
                });

            modelBuilder.Entity("RomManagerShared.WiiU.WiiUUpdate", b =>
                {
                    b.HasBaseType("RomManagerShared.Base.Update");

                    b.Property<string>("RelatedGameTitleID")
                        .HasColumnType("TEXT");

                    b.Property<string>("RelatedGameTitleName")
                        .HasColumnType("TEXT");

                    b.ToTable("Update", t =>
                        {
                            t.Property("RelatedGameTitleID")
                                .HasColumnName("WiiUUpdate_RelatedGameTitleID");

                            t.Property("RelatedGameTitleName")
                                .HasColumnName("WiiUUpdate_RelatedGameTitleName");
                        });

                    b.HasDiscriminator().HasValue("WiiUUpdate");
                });

            modelBuilder.Entity("RomManagerShared.Xbox360.Xbox360Update", b =>
                {
                    b.HasBaseType("RomManagerShared.Base.Update");

                    b.HasDiscriminator().HasValue("Xbox360Update");
                });

            modelBuilder.Entity("DLCUpdate", b =>
                {
                    b.HasOne("RomManagerShared.Base.DLC", null)
                        .WithMany()
                        .HasForeignKey("DLCsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RomManagerShared.Base.Update", null)
                        .WithMany()
                        .HasForeignKey("UpdatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RomManagerShared.Base.DLC", b =>
                {
                    b.HasOne("RomManagerShared.Base.DLC", null)
                        .WithMany("DLCs")
                        .HasForeignKey("DLCId");

                    b.HasOne("RomManagerShared.Base.Game", "RelatedGame")
                        .WithMany("DLCs")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelatedGame");
                });

            modelBuilder.Entity("RomManagerShared.Base.Game", b =>
                {
                    b.HasOne("RomManagerShared.Base.DLC", null)
                        .WithMany("RomHacks")
                        .HasForeignKey("DLCId");

                    b.HasOne("RomManagerShared.Base.Game", null)
                        .WithMany("RomHacks")
                        .HasForeignKey("GameId");

                    b.HasOne("RomManagerShared.Base.Update", null)
                        .WithMany("RomHacks")
                        .HasForeignKey("UpdateId");
                });

            modelBuilder.Entity("RomManagerShared.Base.Rating", b =>
                {
                    b.HasOne("RomManagerShared.Base.DLC", null)
                        .WithMany("Ratings")
                        .HasForeignKey("DLCId");

                    b.HasOne("RomManagerShared.Base.Game", null)
                        .WithMany("Ratings")
                        .HasForeignKey("GameId");

                    b.HasOne("RomManagerShared.Base.Update", null)
                        .WithMany("Ratings")
                        .HasForeignKey("UpdateId");
                });

            modelBuilder.Entity("RomManagerShared.Base.RomDescription", b =>
                {
                    b.HasOne("RomManagerShared.Base.DLC", null)
                        .WithMany("Descriptions")
                        .HasForeignKey("DLCId");

                    b.HasOne("RomManagerShared.Base.Game", null)
                        .WithMany("Descriptions")
                        .HasForeignKey("GameId");

                    b.HasOne("RomManagerShared.Base.Update", null)
                        .WithMany("Descriptions")
                        .HasForeignKey("UpdateId");
                });

            modelBuilder.Entity("RomManagerShared.Base.RomHash", b =>
                {
                    b.HasOne("RomManagerShared.Base.DLC", null)
                        .WithMany("Hashes")
                        .HasForeignKey("DLCId");

                    b.HasOne("RomManagerShared.Base.Game", null)
                        .WithMany("Hashes")
                        .HasForeignKey("GameId");

                    b.HasOne("RomManagerShared.Base.Update", null)
                        .WithMany("Hashes")
                        .HasForeignKey("UpdateId");
                });

            modelBuilder.Entity("RomManagerShared.Base.RomHashProperty", b =>
                {
                    b.HasOne("RomManagerShared.Base.RomHash", null)
                        .WithMany("Properties")
                        .HasForeignKey("RomHashId");
                });

            modelBuilder.Entity("RomManagerShared.Base.RomTitle", b =>
                {
                    b.HasOne("RomManagerShared.Base.DLC", null)
                        .WithMany("Titles")
                        .HasForeignKey("DLCId");

                    b.HasOne("RomManagerShared.Base.Game", null)
                        .WithMany("Titles")
                        .HasForeignKey("GameId");

                    b.HasOne("RomManagerShared.Base.Update", null)
                        .WithMany("Titles")
                        .HasForeignKey("UpdateId");
                });

            modelBuilder.Entity("RomManagerShared.Base.Update", b =>
                {
                    b.HasOne("RomManagerShared.Base.Game", "RelatedGame")
                        .WithMany("Updates")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RomManagerShared.Base.Update", null)
                        .WithMany("Updates")
                        .HasForeignKey("UpdateId");

                    b.Navigation("RelatedGame");
                });

            modelBuilder.Entity("RomManagerShared.Base.DLC", b =>
                {
                    b.Navigation("DLCs");

                    b.Navigation("Descriptions");

                    b.Navigation("Hashes");

                    b.Navigation("Ratings");

                    b.Navigation("RomHacks");

                    b.Navigation("Titles");
                });

            modelBuilder.Entity("RomManagerShared.Base.Game", b =>
                {
                    b.Navigation("DLCs");

                    b.Navigation("Descriptions");

                    b.Navigation("Hashes");

                    b.Navigation("Ratings");

                    b.Navigation("RomHacks");

                    b.Navigation("Titles");

                    b.Navigation("Updates");
                });

            modelBuilder.Entity("RomManagerShared.Base.RomHash", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("RomManagerShared.Base.Update", b =>
                {
                    b.Navigation("Descriptions");

                    b.Navigation("Hashes");

                    b.Navigation("Ratings");

                    b.Navigation("RomHacks");

                    b.Navigation("Titles");

                    b.Navigation("Updates");
                });
#pragma warning restore 612, 618
        }
    }
}
